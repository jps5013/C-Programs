#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

char ASCIItoOffset(char c);
char OffsettoASCII(int x, char forCase);


int main(int argc, string argv[])
{   
// taking care of not 2 arguments 
    if(argc != 2)
    {
        printf("You've been a very bad boy!\n");
        return 1;
    }
   
    string key = argv[1];
// taking care of !isalpha(key)    
    for(int j = 0, n = strlen(key); j < n ;j++)
    {
        if(!isalpha(key[j]))
        {
            printf("You've been a very bad boy!\n");
            return 1;
        }
    }    
    
    //declaring variables needed in program  
    string plaintext = GetString();
    int klen = strlen(key);
    // don't need plen, as only used in for loop below, but doesn't hurt
    int plen = strlen(plaintext);    
   
    /**
     * what I want to do is implement keyindex = jth char % klen and use that as the key index
     * within the is alpha block. this will ensure the key only incrments for alpha chars
     */
  
     for(int i = 0; i < plen ;i++)
     {
        //declare a new variable that is another counter
        /** int j = i will set j to be whatever i is at the start of every loop
         *  this is a problem because i is not regulated by the isalpha condition
         *  as I want j to be, so even though j++ is in the isalpha block
         *  this condition will be negated.
         *  so say plaintext = h i i = 0 = h, j set to i to j = 0. i = 2 = ASCII32
         *  we set j = i, so it increments to 2 before the is alpha j ++ happens
         *  tottally negates my logic of j++ being within isalpha branch.  
         **/
        int j = i;
        if(isalpha(plaintext[i]))
        { 
            // this counter only incremenets if isalpha(plaintext[i])
            // j++;
            // counter that increments only if isalpha(p[i])
            /**say p[i] = 'a'. a is fed into ASCIItoOffset. this function
             * uses int islower(int c), so it reads the input of 'a'
             * as an int and returns an int. so this means the new variable
             * offset is actually of type int, so must declare it in next line as such.
             **/
             // cipher formula = c[i] =(p[i] + k[j]) % 26
            int offset = ASCIItoOffset(plaintext[i]);
            /** now converted p[i] to a = 0, b = 1 etc based logic
             *  so below line satisfies c[i] = (p[i] + k[j])
             **/
            offset += key[j % klen];
            // below line satisfies the % 26 portion of c[i] = (p[i] + k[j])% 26
            offset %= 26;
            // now we take that value and convert it back to ASCII for printing.
            char cipher = OffsettoASCII(offset, plaintext[i]);
            printf("%c", cipher);          
        }               
        else                
        {
            printf("%c",plaintext[i]);
        } 
     }
    printf("\n");
    return 0;       
}



char ASCIItoOffset(char c)
{
    int offset;
    if(islower(c))
    {
        offset = c - 'a';
    }
    else
    {
        offset = c - 'A';   
    }
    return offset;
}

char OffsettoASCII(int x, char forCase)
{   
    int reset; 
    if(islower(forCase))
    {
        reset = x + 'a'; 
    }
    else
    {
        reset = x + 'A';   
    }
    return reset;
}
